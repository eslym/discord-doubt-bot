{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {\n    ApplicationCommandData,\n    ButtonInteraction,\n    Client,\n    ContextMenuInteraction,\n    Intents,\n    InteractionReplyOptions,\n    Message,\n    MessageActionRow,\n    MessageButton,\n    MessageEmbed,\n    MessageSelectMenu, SelectMenuInteraction,\n    Snowflake,\n    TextBasedChannels\n} from 'discord.js';\nimport {format} from \"util\";\nimport path = require('path');\nimport fs = require('fs');\nimport YAML = require('yaml');\nimport Dict = NodeJS.Dict;\n\nconst root = path.resolve(__dirname, '..');\n\nconst commands: ApplicationCommandData[] = [\n    {\n        name: 'Ask for Doubt',\n        type: 'MESSAGE',\n    }\n]\n\ninterface ReactionList {\n    text: string,\n    images: string[]\n}\n\nconst reactions: Dict<ReactionList> = {};\n\nif (fs.existsSync(path.resolve(root, 'reactions.yml'))) {\n    let res = YAML.parse(fs.readFileSync(path.resolve(root, 'reactions.yml')).toString()) as Dict<ReactionList>;\n    for (let [key, reaction] of Object.entries(res)) {\n        if (reaction.images.length === 0) {\n            continue;\n        }\n        reactions[key] = reaction;\n    }\n    commands.push({\n        name: 'Random Reaction',\n        type: \"MESSAGE\",\n    });\n}\n\nconst buttons: MessageActionRow[] = [\n    new MessageActionRow()\n        .addComponents(\n            new MessageButton()\n                .setStyle('SECONDARY')\n                .setEmoji('‚ùå')\n                .setCustomId('doubt')\n        )\n];\n\nconst presetEmbed: Dict<InteractionReplyOptions> = {\n    askForDoubt: {\n        embeds: [\n            new MessageEmbed()\n                .setDescription('You asked for doubt.')\n                .setColor('BLUE')\n        ],\n        ephemeral: true,\n    },\n\n    askForDoubtFailed: {\n        embeds: [\n            new MessageEmbed()\n                .setDescription(\"Sorry, I can't help you to ask for doubt at here.\")\n                .setColor('RED')\n        ],\n        ephemeral: true,\n    },\n\n    doubt: {\n        embeds: [\n            new MessageEmbed()\n                .setDescription('You doubted.')\n                .setColor('BLUE')\n        ],\n        ephemeral: true,\n    },\n\n    doubtFailed: {\n        embeds: [\n            new MessageEmbed()\n                .setDescription(\"Sorry, I can't help you to doubt here.\")\n                .setColor('RED')\n        ],\n        ephemeral: true,\n    },\n\n    reaction: {\n        embeds: [\n            new MessageEmbed()\n                .setDescription('Select a type of reaction to give reaction')\n                .setColor('BLUE')\n        ],\n    },\n\n    reactionFailed: {\n        embeds: [\n            new MessageEmbed()\n                .setDescription(\"Failed to give reaction.\")\n                .setColor('RED')\n        ],\n        ephemeral: true,\n    }\n}\n\nconst intents = new Intents()\n    .add(Intents.FLAGS.GUILDS)\n    .add(Intents.FLAGS.GUILD_MESSAGES)\n\nconst client = new Client({intents});\n\nfunction randomByte() {\n    return 128 + Math.floor(Math.random() * 128);\n}\n\nasync function handleDoubtButton(button: ButtonInteraction) {\n    try {\n        let channel = button.channel;\n        if (!channel) {\n            let guild = await client.guilds.fetch(button.guildId);\n            channel = await guild.channels.fetch(button.channelId) as TextBasedChannels;\n        }\n        let message: Message = button.message instanceof Message ?\n            button.message : await channel.messages.fetch(button.message.id);\n        let source = await message.fetchReference();\n        let embed = new MessageEmbed()\n            .setColor([randomByte(), randomByte(), randomByte()])\n            .setDescription(`${button.user} doubted.`)\n            .setTimestamp(new Date());\n        await source.reply({embeds: [embed]});\n        await button.reply(presetEmbed.doubt);\n    } catch (_) {\n        await button.reply(presetEmbed.doubtFailed);\n    }\n}\n\nasync function handleDoubtContext(context: ContextMenuInteraction) {\n    try {\n        let channel = context.channel;\n        if (!channel) {\n            let guild = await client.guilds.fetch(context.guildId);\n            channel = await guild.channels.fetch(context.channelId) as TextBasedChannels;\n        }\n        let message: Message = await channel.messages.fetch(context.targetId);\n        let embed = new MessageEmbed()\n            .setColor([randomByte(), randomByte(), randomByte()])\n            .setTitle('Press ‚ùå to doubt.')\n            .setDescription(`${context.user} wants to doubt.`)\n            .setTimestamp(new Date());\n        await message.reply({\n            embeds: [embed],\n            components: buttons\n        });\n        await context.reply(presetEmbed.askForDoubt);\n    } catch (_) {\n        await context.reply(presetEmbed.askForDoubtFailed);\n    }\n}\n\nasync function handleReactionContext(context: ContextMenuInteraction){\n    try {\n        let menu = new MessageSelectMenu()\n            .setCustomId('reaction')\n            .setPlaceholder('Select an reaction type to react.')\n            .setOptions(Object.entries(reactions).map(e=>({\n                label: e[0],\n                description: format(e[1].text, 'you'),\n                value: `${context.targetId};${e[0]}`\n            })));\n        let msg: InteractionReplyOptions = {\n            embeds: presetEmbed.reaction.embeds,\n            components: [new MessageActionRow({components: [menu]})],\n            ephemeral: true\n        }\n        await context.reply(msg);\n    } catch (_) {\n        await context.reply(presetEmbed.reactionFailed);\n    }\n}\n\nasync function handleSelectMenu(context: SelectMenuInteraction) {\n    try {\n        let [msgid, type] = context.values[0].split(';');\n        let sample = reactions[type].images;\n        let embed = new MessageEmbed()\n            .setColor([randomByte(), randomByte(), randomByte()])\n            .setDescription(format(reactions[type].text, context.user.toString()))\n            .setImage(sample[Math.floor(Math.random() * sample.length)])\n            .setTimestamp(new Date());\n        let message = await context.channel.messages.fetch(msgid);\n        await message.reply({\n            embeds: [embed],\n        });\n        await context.update(presetEmbed.reaction);\n    } catch (_) {\n        await context.reply(presetEmbed.reactionFailed);\n    }\n}\n\nclient.on('ready', () => (async () => {\n    let link = new URL('https://discord.com/oauth2/authorize');\n    link.searchParams.set('client_id', client.application.id);\n    link.searchParams.set('scope', 'bot applications.commands');\n    link.searchParams.set('permissions', '274878123008');\n    console.log('Use this link to invite bot:');\n    console.log(link.toString());\n    let guilds = await client.guilds.fetch();\n    while (guilds.size > 0) {\n        let latest: Snowflake = undefined;\n        for (let apiGuild of guilds.values()) {\n            latest = apiGuild.id;\n            try {\n                let guild = await apiGuild.fetch();\n                if (!guild.commands) {\n                    continue;\n                }\n                await guild.commands.set(commands);\n            } catch (err) {\n                console.warn(err);\n            }\n        }\n        guilds = await client.guilds.fetch({after: latest});\n    }\n})().catch(console.error));\n\nclient.on('guildCreate', (guild) => (async () => {\n    await guild.commands.set(commands)\n        .catch(console.warn);\n})().catch(console.error));\n\nclient.on('interactionCreate', (interaction) => (async () => {\n    if (interaction.isButton()) {\n        return handleDoubtButton(interaction);\n    }\n    if (interaction.isSelectMenu()){\n        return handleSelectMenu(interaction);\n    }\n    if (interaction.isContextMenu()) {\n        if (interaction.commandName === 'Ask for Doubt') {\n            return handleDoubtContext(interaction);\n        } else {\n            return handleReactionContext(interaction);\n        }\n    }\n})().catch(console.error));\n\nclient.login(process.env.DISCORD_TOKEN)\n    .catch(console.error);\n"]}